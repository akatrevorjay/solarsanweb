
server {
    server_name localhost .$hostname .solarsan.local;

    listen 80 default_server;
    rewrite ^ https://$host$request_uri? permanent;
}

## nginx-statsd
#statsd_server localhost;
# Randomly sample 10% of requests so that you do not overwhelm your statsd server.
#statsd_sample_rate 10;

server {
    server_name localhost .$hostname .solarsan.local;

    listen 443 default_server;
    ssl on;
    ssl_certificate cert.crt;
    ssl_certificate_key cert.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1;
    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
    ssl_prefer_server_ciphers on;

    index index.html index.htm;

    gzip_comp_level 9;
    gzip_http_version 1.1;
    gzip_proxied any;
    gzip_buffers 16 8k;
    gzip_disable "MSIE [1-6].(?!.*SV1)";

    #statsd_count "nginx.solarsanweb.requests" 1;
    # Increment the key by 1, but only if $request_completion is set to something.
    #statsd_count "your_product.pages.index_responses" 1 "$request_completion";
    # Send a timing to "your_product.pages.index_response_time" equal to the value
    # returned from the upstream server. If this value evaluates to 0 or empty-string,
    # it will not be sent. Thus, there is no need to add a test.
    #statsd_timing "your_product.pages.index_response_time" "$upstream_response_time";
    # Increment a key based on the value of a custom header. Only sends the value if
    # the custom header exists in the upstream response.
    #statsd_count "your_product.custom_$upstream_http_x_some_custom_header" 1 
    #    "$upstream_http_x_some_custom_header";

    #types {
    #    application/web-font otf;
    #}

    # maint
    #if (-f $solarsan_root/.maintenance) { rewrite ^(.*)$ /static/maintenance.html last; break; }

    ##
    ## Configurables
    ##
    set $solarsan_root      "/opt/solarsanweb";
    set $solarsan_wsgi_root "unix:///tmp";
    recursive_error_pages on;

    # be afraid
    root $solarsan_root/static;
    set $lh 127.0.0.1;
    set $http_lh http://${lh};
    #error_page 404 = @solarsanweb;

    # def route
    location / { alias $solarsan_root/solarsanweb/static/;
                 #error_page 403 404 = @solarsanweb;
                 error_page 403 = @solarsanweb;
                 location ~ ^/static(/.*)$ {
                    set $static_uri $1;
                    try_files $1 $1/; #expires 24h; #break;
                 }
                 #try_files $uri $uri/ =404;
                 try_files $uri $uri/ @solarsanweb;

                 #break;
                 #try_files /static$uri /static$uri/ /solarsanweb/static$uri /solarsanweb/static$uri/ @solarsanweb;
    }

    ##
    ## SolarSanWeb
    ##
    location @solarsanweb {
        uwsgi_pass $solarsan_wsgi_root/uwsgi.sock;
        include uwsgi_params;
        uwsgi_param UWSGI_SCHEME $scheme;
    }

    ##
    ## DevSolarSanWeb
    ##
    location @devsolarsanweb {
        proxy_pass $http_lh:8000;
        include proxy_params;
        proxy_set_header X-URL-SCHEME $SCHEME;
        #proxy_redirect off;
    }
    #location ^~ /dev/ { try_files @devsolarsanweb break; }

    ##
    ## graphite
    ##
    location @graphite {
        #rewrite ^/graphite /;
        #subs_filter_types text/html text/css text/xml;
        #subs_filter 'src="/' 'src="/graphite' irg;
        #sub_filter 'src="/' 'src="/graphite';

        #proxy_pass $http_lh:8085;
        #include proxy_params;
        #proxy_set_header X-URL-SCHEME $SCHEME;
        #proxy_redirect off;

        uwsgi_pass $solarsan_wsgi_root/uwsgi-graphite.sock;
        include uwsgi_params;
        uwsgi_param UWSGI_SCHEME $scheme;
    }
    location ^~ /content/ { alias /opt/graphite/webapp/content/; expires 24h; }
    location ^~ /media/admin/ { alias /opt/solarsanweb/vendor-local/django/contrib/admin/static; }
    location ^~ /render { try_files @graphite @graphite; }
    location ^~ /metrics/ { try_files @graphite @graphite; }
    location ^~ /dashboard/ { try_files @graphite @graphite; }
    location ^~ /graphlot/ { try_files @graphite @graphite; }
    location ^~ /events/ { try_files @graphite @graphite; }
    location ^~ /composer/ { try_files @graphite @graphite; }
    location ^~ /browser/ { try_files @graphite @graphite; }
    location ^~ /graphite {
        try_files @graphite @graphite;
    #    #error_page 404 = @graphite;
    }

    ##
    ## sentry
    ##
    location @sentry {
        uwsgi_pass $solarsan_wsgi_root/uwsgi-sentry.sock;
        include uwsgi_params;
        uwsgi_param UWSGI_SCHEME $scheme;
    }
    location ^~ /sentry/ { try_files @sentry @sentry; }
    # TODO Static

    location /status {
        stub_status on;
        access_log off;
        #allow 127.0.0.1;
        #deny all;
    }

    ##
    ## Old crap and examples
    ##
    #
    #location ^~ /static {
    #    location ~* /static/css/css_[[:alnum:]]+\.css$ {
    #        concat on;
    #        concat_max_files 20;
    #    }

    #    location ~* /static/js/js_[[:alnum:]]+\.js$ {
    #        concat on;
    #        concat_max_files 30;
    #    }
    #}
    #
    ## static files
    ## -- location ^~ does not check regexes after literal match
    #location ^~ /static/ { ##rewrite ^/static(/.*) $1;
    #                       #alias $solarsan_root/solarsanweb/static/;
    #                       #try_files $uri $uri/ =404;
    #
    #                       root $solarsan_root;
    #                       try_files $uri /solarsanweb$uri =404;
    #}
    #
    #location ^~ /dev {
    #    root $solarsan_root/solarsanweb/static;
    #    rewrite ^/dev(/.*)$ $1;
    #    location ~ ^/static(/.*|)$ { break; }
    #    rewrite ^/static(/.*)$ $1 last break;
    #    try_files /solarsanweb/static/$uri $1 $1/ @solarsanweb_dev;
    #}
    #location /dev {
    #    error_page 404 = @solarsanwebdev;
    #    rewrite ^/dev/(.*)$ /$1;
    #    try_files $uri @solarsanwebdev;
    #    ## DEBUG PURPOSES ONLY ~trevorj 062612
    #    #try_files $uri $uri/ @solarsanweb;
    #    #autoindex on;
    #}
    #location ~ ^(/[^/]+)(/.+)$ {
    #    error_page 418 = @solarsanweb;
    #    error_page 419 = @solarsanweb;
    #    recursive_error_pages on;

    #    if ($1 = "/static") {
    #        if (-f "$document_root$2") {
    #        return 404;
    #    }

    #    if (-f "$document_root/$2) {

    #location ~ ^/static/(.*)$ {
    #    #rewrite ^/static/(.*)$ /$1;
    #    try_files @static0 @static1;

    #    # Serve static files directly:
    #    if (-f $request_filename) {
    #        expires 30d;
    #        break;
    #    }
    #}
    #location @static0 {
    #    root /opt/solarsanweb/static;
    #}
    #location @static1 {
    #    root /opt/solarsanweb/solarsanweb/static;
    #}

    #location ~ / {
    #    error_page 404 = @solarsanweb;
    #    #rewrite ^/static/(.*)$ /$1;

    #    alias @solarsanweb;
    #    #try_files @solarsanweb;
    #    #try_files $uri $uri/ @solarsanweb;
    #    #autoindex on;
    #}


	##error_page 404 /404.html;

	## redirect server error pages to the static page /50x.html
	##
	##error_page 500 502 503 504 /50x.html;
	##location = /50x.html {
	##	root /usr/share/nginx/www;
	##}

	## proxy the PHP scripts to Apache listening on $lh:80
	##
	##location ~ \.php$ {
	##	proxy_pass $http_lh;
    ##  include proxy_params;
    ##  proxy_set_header X-URL-SCHEME $SCHEME;
	##}

	## pass the PHP scripts to FastCGI server listening on $lh:9000
	##
	##location ~ \.php$ {
	##	fastcgi_pass $lh:9000;
	##	fastcgi_index index.php;
	##	include fastcgi_params;
	##}

	## deny access to .htaccess files, if Apache's document root
	## concurs with nginx's one
	##
	##location ~ /\.ht {
	##	deny all;
	##}
}

