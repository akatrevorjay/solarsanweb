# vim: set ft=config:

{% if settings.DEBUG %}

; Web -- Dev server with werkzeug
[program:devserver_plus]
;command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py runserver_plus --threaded 0.0.0.0:8000
command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py runserver_plus 0.0.0.0:8000
directory = {{ settings.TOP_DIR }}
;startsecs = 5
startretries = 10
autorestart = true
;autostart = {{ settings.DEBUG }}
autostart = False
autoreload = false

; Web -- Dev server
[program:devserver]
command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py runserver 0.0.0.0:8000
directory = {{ settings.TOP_DIR }}
;startsecs = 5
startretries = 10
autorestart = true
;autostart = {{ settings.DEBUG }}
autostart = False
autoreload = false

{% endif %}
{#{% else %}#}

; Web -- Nginx WSGI Production
[program:uwsgi]
command = uwsgi -s /tmp/uwsgi.sock -C 777 --vacuum {% if settings.DEBUG %}--http-socket :8080 --static-map /static=./solarsanweb/static{% endif %} --chdir {{ settings.TOP_DIR }} -w solarsanweb.wsgi:application --pidfile ./data/uwsgi.pid --carbon 127.0.0.1:2003 --threads 4 --forkbomb-delay 5 --py-auto-reload --autoload
#-H {{ settings.VIRTUALENV_DIR }}
directory = {{ settings.TOP_DIR }}
;startsecs = 5
startretries = 10
autorestart = true
; May want to make this into eclude instead of autostart.
autostart = {% if settings.DEBUG %}false{% else %}true{% endif %}
;autostart = True
autoreload = false

{#{% endif %}#}


; Celery -- Scheduler
[program:beat]
# --pidfile {{ settings.DATA_DIR }}/celerybeat.pid --workdir {{ settings.DATA_DIR }}
command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py celery beat {% if settings.DEBUG %}-l DEBUG{% else %}-l INFO{% endif %} -s {{ settings.DATA_DIR }}/celerybeat-schedule --pidfile {{ settings.DATA_DIR }}/celerybeat.pid
;startsecs = 5
startretries = 10
autorestart = true
;autostart = false
;autoreload = false

; Celery -- Daemon
[program:worker]
; --autoreload --max-interval=10 -P (processes[default]|eventlet|gevent|solo|threads) -E -B --autoscale=5,1
command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py celery worker {% if settings.DEBUG %}-l DEBUG --autoreload{% else %}-l INFO{% endif %} --purge --soft-time-limit=1800 --time-limit=3600 --maxtasksperchild=100 --pidfile {{ settings.DATA_DIR }}/celeryd.pid -c 4
stopwaitsecs=45               ; max num secs to wait b4 SIGKILL (default 10)
startsecs = 5
startretries = 10
autorestart = true
;stopsignal = QUIT               ; signal used to kill process (default TERM)
;autostart = false
;autoreload = false

[program:mon]
command = {{ PYTHON }} {{ settings.TOP_DIR }}/manage.py celerymon --pidfile {{ settings.DATA_DIR }}/celerymon.pid --traceback -l INFO
autostart = true
autorestart = true
startsecs = 5
startretries = 10

[group:celery]
programs = beat,worker,mon
priority = 999



; cube -- collector
;   node.js graphing aggregate with mongo backend, meant for cubism really
[program:collector]
command = node bin/collector ./bin/collector-config.js
directory = {{ settings.TOP_DIR }}/3rd/cube

; cube -- evaluator
[program:evaluator]
command = node bin/evaluator ./bin/evaluator-config.js
directory = {{ settings.TOP_DIR }}/3rd/cube

[group:cube]
programs = collector,evaluator
priority = 999




; General -- Autoreload (Do not use this anymore)
[program:autoreload]
exclude = True
;{% if not settings.DEBUG %}exclude = True{% endif %}
;startsecs = 5
;startretries = 10
;autorestart = true
;autoreload = false

[unix_http_server]
file={{ settings.DATA_DIR }}/supervisor.sock   ; (the path to the socket file)
chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))


;[inet_http_server]         ; inet (TCP) server disabled by default
;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))


[supervisord]
logfile={{ settings.DATA_DIR }}/log/supervisord.log ; (main log file;default $CWD/supervisord.log)
loglevel={% if settings.DEBUG %}debug{% else %}warn{% endif %} ; (log level;default info; others: debug,warn,trace)
;loglevel=info
pidfile={{ settings.DATA_DIR }}/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
directory={{ settings.TOP_DIR }} ; (default is not to cd during start)
childlogdir={{ settings.DATA_DIR }}/log ; ('AUTO' child log dir, default $TEMP)
environment=DJANGO_SETTINGS_MODULE=solarsanweb.settings
;logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
;logfile_backups=10           ; (num of main logfile rotation backups;default 10)
;nodaemon=false               ; (start in foreground if true;default false)
;nocleanup=true              ; (don't clean up tempfiles at start;default false)
;minfds=1024                  ; (min. avail startup file descriptors;default 1024)
;minprocs=200                 ; (min. avail process descriptors;default 200)
;umask=022                   ; (process file creation umask;default 022)
;user=solarsanweb            ; (default is current user, required if root)
;dentifier=solarvisor       ; (supervisord identifier, default is 'supervisor')
;environment=KEY=value       ; (key value pairs to add to environment)
;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix://{{ settings.DATA_DIR }}/supervisor.sock ; (http|inet):// url to specify socket path
prompt=solarvisor         ; cmd line prompt (default "supervisor")
history_file=~/.sc_history  ; use readline history if available
;directory={{ settings.DATA_DIR }}
;username=solarsan              ; should be same as http_username if set
;password=solarsan              ; should be same as http_password if set


; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

;[program:theprogramname]
;command=/bin/cat              ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=999                  ; the relative start priority (default 999)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; whether/when to restart (default: unexpected)
;startsecs=1                   ; number of secs prog must stay running (def. 1)
;startretries=3                ; max # of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=1,B=2           ; process environment additions (def no adds)
;serverurl=AUTO                ; override serverurl computation (childutils)


; The below sample eventlistener section shows all possible
; eventlistener subsection values, create one or more 'real'
; eventlistener: sections to be able to handle event notifications
; sent by supervisor.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req'd)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; whether/when to restart (default: unexpected)
;startsecs=1                   ; number of secs prog must stay running (def. 1)
;startretries=3                ; max # of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups        ; # of stderr logfile backups (default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=1,B=2           ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample group section shows all possible group values,
; create one or more 'real' group: sections to create "heterogeneous"
; process groups.

;[group:thegroupname]
;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions
;priority=999                  ; the relative start priority (default 999)

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

;[include]
;files = relative/directory/*.ini
