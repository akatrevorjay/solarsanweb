
server {
    server_name localhost .$hostname .solarsan.local;

    listen 80 default_server;
    rewrite ^ https://$host$request_uri? permanent;
}

## nginx-statsd
#statsd_server localhost;
# Randomly sample 10% of requests so that you do not overwhelm your statsd server.
#statsd_sample_rate 10;

server {
    server_name localhost .$hostname .solarsan.local;

    listen 443 default_server;
    ssl on;
    ssl_certificate cert.crt;
    ssl_certificate_key cert.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1;
    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
    ssl_prefer_server_ciphers on;

    index index.html index.htm;

    gzip_comp_level 9;
    gzip_http_version 1.1;
    gzip_proxied any;
    gzip_buffers 16 8k;
    gzip_disable "MSIE [1-6].(?!.*SV1)";

    #statsd_count "nginx.solarsanweb.requests" 1;
    # Increment the key by 1, but only if $request_completion is set to something.
    #statsd_count "your_product.pages.index_responses" 1 "$request_completion";
    # Send a timing to "your_product.pages.index_response_time" equal to the value
    # returned from the upstream server. If this value evaluates to 0 or empty-string,
    # it will not be sent. Thus, there is no need to add a test.
    #statsd_timing "your_product.pages.index_response_time" "$upstream_response_time";
    # Increment a key based on the value of a custom header. Only sends the value if
    # the custom header exists in the upstream response.
    #statsd_count "your_product.custom_$upstream_http_x_some_custom_header" 1 
    #    "$upstream_http_x_some_custom_header";

    #types {
    #    application/web-font otf;
    #}

    # maint
    #if (-f $solarsan_root/.maintenance) { rewrite ^(.*)$ /static/maintenance.html last; break; }

    ##
    ## Configurables
    ##
    set $solarsan_root      "/opt/solarsanweb";
    set $solarsan_wsgi_root "unix:///tmp";
    recursive_error_pages on;

    # be afraid
    root $solarsan_root;
    set $lh 127.0.0.1;
    set $http_lh http://${lh};
    #error_page 404 = @solarsanweb;

    # def route
    location / { ##alias $solarsan_root/solarsanweb/static/;
                 ##error_page 403 404 = @solarsanweb;
                 #error_page 403 = @solarsanweb;
                 #location ~ ^/static(/.*)$ {
                 #   set $static_uri $1;
                 #   #try_files /static$1 /static$1/ /solarsanweb/static$1 /solarsanweb/static$1/; #expires 24h; #break;
                 #   try_files /static$1 /static$1/; #expires 24h; #break;
                 #}
                 ##try_files $uri $uri/ =404;
                 #try_files $uri $uri/ @solarsanweb;

                 try_files $uri $uri/ @devsolarsanweb;
                 error_page 403 = @devsolarsanweb;

                 #break;
                 #try_files /static$uri /static$uri/ /solarsanweb/static$uri /solarsanweb/static$uri/ @solarsanweb;
    }

    ##
    ## Cube
    ##
    location /cube {
        include proxy_params;
        rewrite /cube/(.*) /$1  break;
        proxy_pass         $http_lh:1081;
        proxy_redirect     off;
        proxy_set_header   Host $host;
    }

    location /1.0 {
        include proxy_params;
        #rewrite /1.0/(.*) /$1  break;
        proxy_pass         $http_lh:1081;
        proxy_redirect     off;
        proxy_set_header   Host $host;
    }

    location @cube {
        proxy_pass $http_lh:1081;
        #include proxy_params;
        #proxy_set_header X-URL-SCHEME $SCHEME;
        #proxy_redirect off;
    }

    ##
    ## SolarSanWeb
    ##
    location @solarsanweb {
        uwsgi_pass $solarsan_wsgi_root/uwsgi.sock;
        include uwsgi_params;
        uwsgi_param UWSGI_SCHEME $scheme;
    }

    ##
    ## DevSolarSanWeb
    ##
    location @devsolarsanweb {
        proxy_pass $http_lh:8000;
        include proxy_params;
        proxy_set_header X-URL-SCHEME $SCHEME;
        #proxy_redirect off;
    }
}

